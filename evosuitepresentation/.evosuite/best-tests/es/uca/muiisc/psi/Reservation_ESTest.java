/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 13 23:41:44 GMT 2020
 */

package es.uca.muiisc.psi;

import org.junit.Test;
import static org.junit.Assert.*;
import es.uca.muiisc.psi.Guest;
import es.uca.muiisc.psi.Reservation;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reservation_ESTest extends Reservation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(666L);
      Guest guest0 = new Guest("(Z$zpj&1/AE;<mk3UI", "(Z$zpj&1/AE;<mk3UI", "(Z$zpj&1/AE;<mk3UI", localDate0, "6");
      Reservation reservation0 = new Reservation(localDate0, localDate0, guest0);
      Guest guest1 = reservation0.getGuest();
      assertEquals("(Z$zpj&1/AE;<mk3UI", guest1.getLastName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Guest guest0 = new Guest("", "", ":1#Fk(", (LocalDate) null, "");
      Reservation reservation0 = new Reservation((LocalDate) null, (LocalDate) null, guest0);
      LocalDate localDate0 = reservation0.getDateChekout();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Guest guest0 = new Guest("", "", ":1#Fk(", (LocalDate) null, "");
      Reservation reservation0 = new Reservation((LocalDate) null, (LocalDate) null, guest0);
      LocalDate localDate0 = reservation0.getDateChekin();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Period period0 = Period.ofDays(2105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Reservation reservation0 = new Reservation(localDate0, localDate0, (Guest) null);
      LocalDate localDate1 = reservation0.getDateChekout();
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Period period0 = Period.ofDays(2105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Reservation reservation0 = new Reservation(localDate0, localDate0, (Guest) null);
      LocalDate localDate1 = reservation0.getDateChekin();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Period period0 = Period.ofDays(2105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Reservation reservation0 = new Reservation(localDate0, localDate0, (Guest) null);
      reservation0.setDateChekout(localDate0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Period period0 = Period.ofDays(2105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Reservation reservation0 = new Reservation(localDate0, localDate0, (Guest) null);
      Guest guest0 = reservation0.getGuest();
      assertNull(guest0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Period period0 = Period.ofDays(2105);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Reservation reservation0 = new Reservation(localDate0, localDate0, (Guest) null);
      reservation0.setDateChekin(localDate0);
  }
}
